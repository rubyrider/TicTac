c
game.move!(opponent_move)
game.move!(move)
c
self.save
win? || drawn?
c
self.save
win? || drawn?
c
self.save
win? || drawn?
c
self.save
win? || drawn?
exit
c
get_cell_value(row, column).present?
c
get_cell_value(row, column).present?
get_cell_value(row, column)
c
get_cell_value(row, column)
get_cell_value(row, column).
get_cell_value(row, column).present?
c
board.move!(move.fetch(:y_axis).to_i, move.fetch(:x_axis).to_i, current_mover.id)
current_mover.id)
c
move!(move)
c
@game.errors
@game.errors.messages
@game.move(move_params)
c
self.send cell_column(row, column, false), icon
c
get_cell_value(row, column).present?
column
row
board.move!(move.fetch(:y_axis).to_i, move.fetch(:x_axis).to_i, current_mover.id)
c
board.move!(move.fetch(:y_axis).to_i, move.fetch(:x_axis).to_i, current_mover.id)
game.move!(move)
self.board.moves.create!(move)
c
board.move!(move.fetch(:y_axis).to_i, move.fetch(:x_axis).to_i, current_mover.id)
self.board.moves.create!(move)
c
game.move!(move)
exit
c
 c
move_valid_for?(current_mover.id)
current_mover
c
last_player_id
current_mover
last_mover
c
last_mover
current_mover
c
@winner == board.game.player_id
@winner = position.uniq.first
c
format.html { redirect_to game_path(@game), error: 'Failed to perform move' }
@game.errors
c
format.html { redirect_to game_path(@game), error: 'Failed to perform move' }
@game.errors
@game.reload
@game
c
@game.errors
c
subject
flash
c
row 
c
@game.errors
@game.move(move_params)
c
@game.reload
@game.save
params
c
params
c
@game.reload
@game.save
@game.valid?
@game
params
c
valid_attributes.keys
valid_attributes
c
params
c
params
c
params
@game.errors
@game.save
c
Game.column_names.map(&:to_sym)
Game.column_names
params
c
cell_rows.flatten.select {|cell| cell.nil?}
c
cell_rows.flatten.select {|cell| cell.nil?}
cell_rows.flatten.sellect {|cell| cell.nil?}
cell_rows.flatten.collect {|cell| cell.nil?}
c
cell_rows.flatten.collect {|cell| cell.nil?}
cell_rows.flatten
c
board.cell_view
c
board.cell_view
c
board.cell_view
c
board.cell_view
c
board.cell_view
c
board.cell_view
c
board.cell_view
c
board.cell_view
c
row 
c
row
c
column
row 
c
column
column.is_a?(Integer)
c
column.is_a?(Integer)
row.is_a?(Integer)
row.is_a?(Integer) && column.is_a?(Integer)
column
row 
c
1.upto(3).each {|i| puts i}
1.upto(2).each {|i| puts i}
1.upto(3).each {|i| puts i}
1.upto(3)
row
c
row
